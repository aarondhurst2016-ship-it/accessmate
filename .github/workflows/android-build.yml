name: Build Android APK

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          zip \
          zlib1g-dev \
          libncurses5-dev \
          libgdbm-dev \
          libnss3-dev \
          libssl-dev \
          libreadline-dev \
          libffi-dev \
          libsqlite3-dev \
          libbz2-dev \
          liblzma-dev \
          libncursesw5-dev \
          xz-utils \
          tk-dev \
          libxml2-dev \
          libxmlsec1-dev \
          libffi-dev \
          liblzma-dev
    
    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-global-
    
    - name: Cache buildozer build directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}-${{ hashFiles('src/**') }}
        restore-keys: |
          buildozer-${{ hashFiles('buildozer.spec') }}-
          buildozer-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer python-for-android cython
        pip install -r requirements.txt || echo "No requirements.txt found"
    
    - name: Validate buildozer.spec and icons
      run: |
        echo "Validating buildozer.spec configuration..."
        if [ ! -f buildozer.spec ]; then
          echo "ERROR: buildozer.spec not found!"
          exit 1
        fi
        
        # Check required files exist
        if [ ! -d src ]; then
          echo "ERROR: src/ directory not found!"
          exit 1
        fi
        
        if [ ! -f src/main_android.py ]; then
          echo "ERROR: src/main_android.py not found!"
          exit 1
        fi
        
        # Check icon files exist
        if [ ! -f src/android_icon.png ]; then
          echo "ERROR: src/android_icon.png not found!"
          exit 1
        fi
        
        if [ ! -d android_icons ]; then
          echo "ERROR: android_icons/ directory not found!"
          exit 1
        fi
        
        # Verify Android icon structure
        for density in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
          if [ ! -f "android_icons/mipmap-$density/ic_launcher.png" ]; then
            echo "WARNING: android_icons/mipmap-$density/ic_launcher.png not found!"
          else
            echo "FOUND: android_icons/mipmap-$density/ic_launcher.png"
          fi
        done
        
        echo "[PASS] buildozer.spec and icon validation passed"
    
    - name: Prepare build environment
      run: |
        echo "Setting up build environment..."
        
        # Create necessary directories
        mkdir -p ~/.buildozer
        mkdir -p .buildozer
        
        # Set environment variables for buildozer
        export ANDROIDAPI="34"
        export NDKAPI="21"
        export ANDROID_HOME="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROID_SDK_ROOT="$ANDROID_HOME"
        export PATH="$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools"
        
        echo "[PASS] Build environment prepared"
    
    - name: Build Android APK (Debug)
      if: github.event.inputs.build_type != 'release'
      run: |
        echo "[BUILD] Building DEBUG APK..."
        buildozer android debug
        
        # Verify APK was created
        if [ -f bin/*.apk ]; then
          echo "[SUCCESS] DEBUG APK build successful!"
          ls -la bin/*.apk
        else
          echo "[ERROR] DEBUG APK build failed - no APK found"
          exit 1
        fi
    
    - name: Build Android APK (Release)
      if: github.event.inputs.build_type == 'release'
      run: |
        echo "[BUILD] Building RELEASE APK..."
        
        # Check if signing secrets are available
        if [ -n "${{ secrets.ANDROID_KEYSTORE }}" ] && [ -n "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" ]; then
          echo "[SIGNED] Building signed release APK"
          
          # Configure keystore for signing
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android-release-key.keystore
          
          # Create signing configuration
          echo "" >> buildozer.spec
          echo "android.release_artifact = aab" >> buildozer.spec
          echo "android.debug_artifact = apk" >> buildozer.spec
          echo "android.keystore = android-release-key.keystore" >> buildozer.spec
          echo "android.keyalias = ${{ secrets.ANDROID_KEY_ALIAS }}" >> buildozer.spec
          echo "android.keystorepass = ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> buildozer.spec
          echo "android.keypass = ${{ secrets.ANDROID_KEY_PASSWORD }}" >> buildozer.spec
          
          buildozer android release
        else
          echo "[WARN] No signing secrets configured, building unsigned release"
          echo "[INFO] To enable signed releases, add these GitHub secrets:"
          echo "   - ANDROID_KEYSTORE (base64 encoded keystore file)"
          echo "   - ANDROID_KEYSTORE_PASSWORD"
          echo "   - ANDROID_KEY_ALIAS"
          echo "   - ANDROID_KEY_PASSWORD"
          
          buildozer android release
        fi
        
        # Verify APK was created
        if ls bin/*.apk 1> /dev/null 2>&1; then
          echo "[SUCCESS] RELEASE APK build successful!"
          ls -la bin/*.apk
        else
          echo "[ERROR] RELEASE APK build failed - no APK found"
          exit 1
        fi

    - name: Analyze APK
      if: success()
      run: |
        if ls bin/*.apk 1> /dev/null 2>&1; then
          echo "[ANALYSIS] APK Analysis:"
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "APK File: $APK_FILE"
          echo "APK Size: $(du -h "$APK_FILE" | cut -f1)"
          echo "File type: $(file "$APK_FILE")"
          
          # Install Android build tools for analysis
          sudo apt-get update -qq
          sudo apt-get install -y -qq aapt || echo "Could not install aapt"
          
          if command -v aapt >/dev/null 2>&1; then
            echo "APK Package Info:"
            aapt dump badging "$APK_FILE" | head -5 || echo "Could not get package info"
            echo "APK Permissions:"
            aapt dump permissions "$APK_FILE" || echo "Could not analyze permissions"
            echo "APK Icon Info:"
            aapt dump resources "$APK_FILE" | grep -i icon || echo "Could not find icon info"
          else
            echo "aapt not available for detailed analysis"
          fi
        else
          echo "[WARN] No APK files found for analysis"
        fi
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: android-apk-${{ github.run_number }}
        path: bin/*.apk
        retention-days: 30
    
    - name: Upload build logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          .buildozer/
          *.log
        retention-days: 7
    
    - name: Comment PR with APK info
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find APK file
          const binDir = 'bin';
          let apkInfo = 'APK built successfully with AccessMate logo!';
          
          try {
            if (fs.existsSync(binDir)) {
              const files = fs.readdirSync(binDir);
              const apkFiles = files.filter(f => f.endsWith('.apk'));
              
              if (apkFiles.length > 0) {
                const apkFile = path.join(binDir, apkFiles[0]);
                const stats = fs.statSync(apkFile);
                const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
                
                apkInfo = "## 📱 Android APK Built Successfully!\n\n" +
                         "**📋 APK Details:**\n" +
                         "- 📱 File: `" + apkFiles[0] + "`\n" +
                         "- 📏 Size: " + fileSizeInMB + " MB\n" +
                         "- 🔢 Build: ${{ github.run_number }}\n" +
                         "- 🔗 Commit: ${{ github.sha }}\n" +
                         "- 🎨 Logo: ✅ AccessMate icons included\n\n" +
                         "**📥 Download:**\n" +
                         "Download the APK with AccessMate logo from the workflow artifacts above.\n\n" +
                         "**🎯 Features:**\n" +
                         "- ✅ 40+ accessibility features\n" +
                         "- ✅ AccessMate branding and icons\n" +
                         "- ✅ Voice commands and screen reader\n" +
                         "- ✅ Complete mobile interface";
              }
            }
          } catch (error) {
            console.log('Error reading APK info:', error);
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: apkInfo
          });

  test-android-apk:
    runs-on: ubuntu-latest
    needs: build-android
    if: success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download APK artifact
      uses: actions/download-artifact@v3
      with:
        name: android-apk-${{ github.run_number }}
        path: apk/
    
    - name: Install APK analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y aapt
    
    - name: Analyze APK structure and icons
      run: |
        APK_FILE=$(ls apk/*.apk | head -1)
        echo "[ANALYZE] Analyzing APK: $APK_FILE"
        
        echo "## 📱 APK Information"
        aapt dump badging "$APK_FILE" | head -10
        
        echo -e "\n## 🔐 Permissions"
        aapt dump permissions "$APK_FILE"
        
        echo -e "\n## ⚙️ Features"
        aapt dump configurations "$APK_FILE"
        
        echo -e "\n## 🎨 Icon Resources"
        aapt list "$APK_FILE" | grep -i icon
        
        echo -e "\n## 📋 APK Contents (first 20 files)"
        aapt list "$APK_FILE" | head -20
        
        echo -e "\n## 🎯 Logo/Icon Verification"
        if aapt list "$APK_FILE" | grep -q "ic_launcher.png"; then
          echo "✅ AccessMate logo found in APK!"
        else
          echo "⚠️  Logo may not be properly included"
        fi