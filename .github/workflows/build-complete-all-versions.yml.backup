name: Build ALL Versions - Manual Hard Installs + App Store Packages + GitHub Releases

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

env:
  APP_NAME: AccessMate
  APP_VERSION: 1.0.0
  PYTHON_VERSION: 3.11

jobs:
  # Windows - Manual Hard Install + App Store Package
  build-windows-complete:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Windows dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller cx_Freeze auto-py-to-exe
        Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "InnoSetup.exe"
        Start-Process -FilePath "InnoSetup.exe" -ArgumentList "/VERYSILENT", "/NORESTART" -Wait
    
    - name: Build Windows EXE (Hard System Install)
      run: |
        Write-Host "Setting up main.py for desktop build..."
        Copy-Item "src\main_desktop.py" "src\main.py" -Force -ErrorAction SilentlyContinue
        $env:PYTHONIOENCODING = "utf-8"
        python build_windows.py
        Write-Host "[SUCCESS] Hard System Install EXE created"
    
    - name: Create Inno Setup Hard System Installer
      run: |
        $innoScript = @"
        [Setup]
        AppName=${{ env.APP_NAME }}
        AppVersion=${{ env.APP_VERSION }}
        AppPublisher=AccessMate Team
        AppPublisherURL=https://accessmate.app
        DefaultDirName={autopf}\${{ env.APP_NAME }}
        DefaultGroupName=${{ env.APP_NAME }}
        OutputDir=dist\installers
        OutputBaseFilename=${{ env.APP_NAME }}-HardInstall-v${{ env.APP_VERSION }}
        SetupIconFile=src\accessmate_logo_multisize.ico
        Compression=lzma
        SolidCompression=yes
        WizardStyle=modern
        PrivilegesRequired=admin
        ArchitecturesInstallIn64BitMode=x64
        UninstallDisplayIcon={app}\${{ env.APP_NAME }}.exe
        CreateUninstallRegKey=yes
        UsePreviousAppDir=no

        [Files]
        Source: "dist\${{ env.APP_NAME }}.exe"; DestDir: "{app}"; Flags: ignoreversion
        Source: "README.md"; DestDir: "{app}"; Flags: ignoreversion
        Source: "src\*.py"; DestDir: "{app}\src"; Flags: ignoreversion recursesubdirs
        Source: "requirements.txt"; DestDir: "{app}"; Flags: ignoreversion

        [Icons]
        Name: "{group}\${{ env.APP_NAME }}"; Filename: "{app}\${{ env.APP_NAME }}.exe"
        Name: "{autodesktop}\${{ env.APP_NAME }}"; Filename: "{app}\${{ env.APP_NAME }}.exe"
        Name: "{autostartup}\${{ env.APP_NAME }}"; Filename: "{app}\${{ env.APP_NAME }}.exe"; Parameters: "--startup"

        [Registry]
        Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\${{ env.APP_NAME }}.exe"; ValueType: string; ValueName: ""; ValueData: "{app}\${{ env.APP_NAME }}.exe"
        Root: HKLM; Subkey: "SOFTWARE\${{ env.APP_NAME }}"; ValueType: string; ValueName: "InstallPath"; ValueData: "{app}"
        Root: HKLM; Subkey: "SOFTWARE\${{ env.APP_NAME }}"; ValueType: string; ValueName: "Version"; ValueData: "${{ env.APP_VERSION }}"
        Root: HKCU; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Run"; ValueType: string; ValueName: "${{ env.APP_NAME }}"; ValueData: "{app}\${{ env.APP_NAME }}.exe --startup"

        [Run]
        Filename: "{app}\${{ env.APP_NAME }}.exe"; Description: "Launch ${{ env.APP_NAME }}"; Flags: nowait postinstall skipifsilent
        Filename: "sc"; Parameters: "create AccessMateService binpath= \"{app}\${{ env.APP_NAME }}.exe --service\" start= auto"; Flags: runhidden
        "@
        
        New-Item -ItemType Directory -Force -Path "dist\installers"
        $innoScript | Out-File -FilePath "setup.iss" -Encoding UTF8
        & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "setup.iss"
        echo "[✅ SUCCESS] Inno Setup hard system installer created with registry integration"
    
    - name: Create MSI Package
      run: |
        python -c "
        from cx_Freeze import setup, Executable
        setup(
            name='${{ env.APP_NAME }}',
            version='${{ env.APP_VERSION }}',
            description='Comprehensive Accessibility Assistant',
            executables=[Executable('src/main_desktop.py', target_name='${{ env.APP_NAME }}.exe')],
            options={'bdist_msi': {'upgrade_code': '{12345678-1234-1234-1234-123456789012}'}}
        )"
        python setup.py bdist_msi
        echo "[✅] MSI package created"
    
    - name: Create MSIX Store Package (Microsoft Store)
      run: |
        $msixManifest = @"
        <?xml version="1.0" encoding="utf-8"?>
        <Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10">
          <Identity Name="AccessMate" Version="${{ env.APP_VERSION }}.0" Publisher="CN=AccessMate Team" />
          <Properties>
            <DisplayName>AccessMate</DisplayName>
            <PublisherDisplayName>AccessMate Team</PublisherDisplayName>
            <Description>Comprehensive Accessibility Assistant</Description>
          </Properties>
          <Applications>
            <Application Id="AccessMate" Executable="AccessMate.exe" EntryPoint="Windows.FullTrustApplication">
              <uap:VisualElements DisplayName="AccessMate" Square150x150Logo="logo150.png" Square44x44Logo="logo44.png" BackgroundColor="#0078d4" />
            </Application>
          </Applications>
        </Package>
        "@
        
        New-Item -ItemType Directory -Force -Path "dist\msix"
        $msixManifest | Out-File -FilePath "dist\msix\AppxManifest.xml" -Encoding UTF8
        Copy-Item "dist\${{ env.APP_NAME }}.exe" "dist\msix\"
        
        & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\makeappx.exe" pack /d "dist\msix" /p "dist\AccessMate-Store.msix" /overwrite
        echo "[✅ SUCCESS] MSIX store package for Microsoft Store created"
    
    - name: Upload Windows Artifacts (Hard Install + Store)
      uses: actions/upload-artifact@v3
      with:
        name: windows-complete
        path: |
          dist/*.exe
          dist/installers/*HardInstall*.exe
          dist/*.msi
          dist/*.msix
          build/exe.*/*.exe

  build-android-complete:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
        pip install buildozer cython
        pip install -r requirements.txt
    
    - name: Build APK (Hard System Install)
      run: |
        echo "android.permissions = WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,INSTALL_PACKAGES,DELETE_PACKAGES,SYSTEM_ALERT_WINDOW,DEVICE_ADMIN,BIND_DEVICE_ADMIN" >> buildozer.spec
        echo "android.api = 30" >> buildozer.spec
        echo "android.minapi = 21" >> buildozer.spec
        echo "android.sdk = 30" >> buildozer.spec
        
        buildozer android debug
        buildozer android release
        echo "APK for hard system install created with admin permissions"
    
    - name: Build AAB (Google Play Store)
      run: |
        cp buildozer.spec buildozer.spec.backup
        sed -i '/android.permissions.*INSTALL_PACKAGES.*DELETE_PACKAGES.*DEVICE_ADMIN/d' buildozer.spec
        
        echo "android.release_artifact = aab" >> buildozer.spec
        echo "android.permissions = WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,RECORD_AUDIO,CAMERA" >> buildozer.spec
        buildozer android release
        
        mv buildozer.spec.backup buildozer.spec
        echo "AAB for Google Play Store created (store-compliant permissions)"
    
    - name: Upload Android Artifacts (Hard Install + Store)
      uses: actions/upload-artifact@v3
      with:
        name: android-complete
        path: |
          bin/*debug*.apk
          bin/*release*.apk
          bin/*.aab

  build-ios-complete:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install iOS dependencies
      run: |
        pip install kivy-ios
        pip install -r requirements.txt
    
    - name: Build iOS Project
      run: |
        python build_ios.py
        echo "iOS Xcode project created"
    
    - name: Create IPA Hard Install Structure
      run: |
        mkdir -p dist/ios-hardinstall/Payload
        cp -r AccessMate_iOS/ dist/ios-hardinstall/Payload/AccessMate.app/
        
        cat > dist/ios-hardinstall/Payload/AccessMate.app/hardinstall.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>SystemIntegration</key>
            <true/>
            <key>BackgroundAppRefresh</key>
            <true/>
            <key>AutoLaunch</key>
            <true/>
            <key>AccessibilityIntegration</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        cd dist/ios-hardinstall && zip -r ../AccessMate-HardInstall.ipa .
        echo "IPA structure for hard system install created"
    
    - name: Create App Store Package
      run: |
        mkdir -p dist/ios-store
        cp -r AccessMate_iOS/ dist/ios-store/
        echo "App Store submission package created"
    
    - name: Upload iOS Artifacts (Hard Install + Store)
      uses: actions/upload-artifact@v3
      with:
        name: ios-complete
        path: |
          dist/AccessMate-HardInstall.ipa
          dist/ios-store/
          AccessMate_iOS/

  build-macos-complete:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install macOS dependencies
      run: |
        pip install py2app dmgbuild
        pip install -r requirements.txt
        brew install create-dmg
    
    - name: Build macOS App
      run: |
        python build_macos.py
        echo "macOS .app bundle created"
    
    - name: Create DMG (Hard System Install)
      run: |
        cat > hardinstall.sh << 'EOF'
        #!/bin/bash
        echo "Installing AccessMate with hard system integration..."
        
        sudo cp -R "$1" "/Applications/"
        
        sudo defaults write /Library/Preferences/com.accessmate.systemwide AutoLaunch -bool true
        sudo launchctl load -w /Library/LaunchDaemons/com.accessmate.daemon.plist 2>/dev/null || true
        
        sudo sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db "INSERT or IGNORE into access VALUES('kTCCServiceAccessibility','com.accessmate.app',0,1,1,NULL,NULL,NULL,'UNUSED',NULL,0,1541440109);"
        
        echo "Hard system install completed!"
        EOF
        
        chmod +x hardinstall.sh
        
        create-dmg \
          --volname "${{ env.APP_NAME }} Hard Installer" \
          --window-pos 200 120 \
          --window-size 700 400 \
          --icon-size 100 \
          --icon "${{ env.APP_NAME }}.app" 175 120 \
          --app-drop-link 425 120 \
          --add-file "Hard Install Script" hardinstall.sh 300 250 \
          "dist/${{ env.APP_NAME }}-HardInstall-v${{ env.APP_VERSION }}.dmg" \
          "dist/${{ env.APP_NAME }}.app"
        echo "DMG for hard system install created with admin integration"
    
    - name: Create PKG (Mac App Store)
      run: |
        pkgbuild --root "dist/${{ env.APP_NAME }}.app" \
                 --install-location "/Applications/${{ env.APP_NAME }}.app" \
                 --identifier "com.accessmate.app" \
                 --version "${{ env.APP_VERSION }}" \
                 "dist/${{ env.APP_NAME }}-AppStore.pkg"
        echo "PKG for Mac App Store created"
    
    - name: Upload macOS Artifacts (Hard Install + Store)
      uses: actions/upload-artifact@v3
      with:
        name: macos-complete
        path: |
          dist/*HardInstall*.dmg
          dist/*.app
          dist/*AppStore*.pkg

  build-linux-complete:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev build-essential \
          libasound2-dev portaudio19-dev alien fakeroot rpm flatpak-builder
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build Linux executable
      run: |
        python build_linux.py
        echo "Linux executable created"
    
    - name: Create AppImage (Hard System Install)
      run: |
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        mkdir -p AccessMate.AppDir/usr/bin
        mkdir -p AccessMate.AppDir/usr/share/applications
        mkdir -p AccessMate.AppDir/usr/share/icons/hicolor/256x256/apps
        mkdir -p AccessMate.AppDir/usr/lib/systemd/user
        
        cp dist/accessmate AccessMate.AppDir/usr/bin/
        cp linux_icons/accessmate_256.png AccessMate.AppDir/accessmate.png
        cp accessmate.desktop AccessMate.AppDir/
        
        cat > AccessMate.AppDir/usr/lib/systemd/user/accessmate.service << 'EOF'
        [Unit]
        Description=AccessMate Accessibility Service
        After=graphical-session.target
        
        [Service]
        Type=simple
        ExecStart=%h/.local/bin/accessmate --daemon
        Restart=always
        RestartSec=3
        
        [Install]
        WantedBy=default.target
        EOF
        
        cat > AccessMate.AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        
        if [ "$1" = "--hardinstall" ]; then
            echo "Installing AccessMate with hard system integration..."
            mkdir -p ~/.local/bin
            cp "${HERE}/usr/bin/accessmate" ~/.local/bin/
            cp "${HERE}/usr/lib/systemd/user/accessmate.service" ~/.config/systemd/user/ 2>/dev/null || true
            systemctl --user enable accessmate.service 2>/dev/null || true
            systemctl --user start accessmate.service 2>/dev/null || true
            echo "Hard system install completed!"
            exit 0
        fi
        
        exec "${HERE}/usr/bin/accessmate" "$@"
        EOF
        chmod +x AccessMate.AppDir/AppRun
        
        ./appimagetool-x86_64.AppImage AccessMate.AppDir AccessMate-HardInstall-x86_64.AppImage
        echo "AppImage for hard system install created with systemd integration"
    
    - name: Create DEB Package (Ubuntu/Debian)
      run: |
        mkdir -p accessmate-deb/DEBIAN
        mkdir -p accessmate-deb/usr/bin
        mkdir -p accessmate-deb/usr/share/applications
        mkdir -p accessmate-deb/usr/share/icons/hicolor/256x256/apps
        
        cp dist/accessmate accessmate-deb/usr/bin/
        cp accessmate.desktop accessmate-deb/usr/share/applications/
        cp linux_icons/accessmate_256.png accessmate-deb/usr/share/icons/hicolor/256x256/apps/accessmate.png
        
        cat > accessmate-deb/DEBIAN/control << EOF
        Package: accessmate
        Version: ${{ env.APP_VERSION }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: AccessMate Team <support@accessmate.app>
        Description: Comprehensive Accessibility Assistant
        EOF
        
        dpkg-deb --build accessmate-deb accessmate_${{ env.APP_VERSION }}_amd64.deb
        echo "DEB package for Ubuntu/Debian created"
    
    - name: Create RPM Package (Red Hat/SUSE)
      run: |
        alien --to-rpm --scripts accessmate_${{ env.APP_VERSION }}_amd64.deb
        echo "RPM package for Red Hat/SUSE created"
    
    - name: Create Flatpak Manifest (Flathub Store)
      run: |
        mkdir -p flatpak
        cat > flatpak/com.accessmate.AccessMate.yml << EOF
        app-id: com.accessmate.AccessMate
        runtime: org.freedesktop.Platform
        runtime-version: '22.08'
        sdk: org.freedesktop.Sdk
        command: accessmate
        finish-args:
          - --share=ipc
          - --socket=x11
          - --socket=wayland
          - --socket=pulseaudio
          - --device=dri
          - --filesystem=home
        modules:
          - name: accessmate
            buildsystem: simple
            build-commands:
              - install -D accessmate /app/bin/accessmate
            sources:
              - type: file
                path: ../dist/accessmate
        EOF
        echo "Flatpak manifest for Flathub store created"
    
    - name: Upload Linux Artifacts (Hard Install + Store)
      uses: actions/upload-artifact@v3
      with:
        name: linux-complete
        path: |
          AccessMate-HardInstall-x86_64.AppImage
          accessmate_*.deb
          accessmate-*.rpm
          flatpak/

  create-comprehensive-github-release:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [build-windows-complete, build-android-complete, build-ios-complete, build-macos-complete, build-linux-complete]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Organize release files
      run: |
        mkdir -p release-files/{manual-hard-installs,app-store-packages}
        
        cp windows-complete/*HardInstall*.exe release-files/manual-hard-installs/ 2>/dev/null || true
        cp windows-complete/*.msi release-files/manual-hard-installs/ 2>/dev/null || true
        cp android-complete/*debug*.apk release-files/manual-hard-installs/ 2>/dev/null || true
        cp android-complete/*release*.apk release-files/manual-hard-installs/ 2>/dev/null || true
        cp ios-complete/*HardInstall*.ipa release-files/manual-hard-installs/ 2>/dev/null || true
        cp macos-complete/*HardInstall*.dmg release-files/manual-hard-installs/ 2>/dev/null || true
        cp linux-complete/*HardInstall*.AppImage release-files/manual-hard-installs/ 2>/dev/null || true
        cp linux-complete/*.deb release-files/manual-hard-installs/ 2>/dev/null || true
        cp linux-complete/*.rpm release-files/manual-hard-installs/ 2>/dev/null || true
        
        cp windows-complete/*.msix release-files/app-store-packages/ 2>/dev/null || true
        cp android-complete/*.aab release-files/app-store-packages/ 2>/dev/null || true
        cp macos-complete/*AppStore*.pkg release-files/app-store-packages/ 2>/dev/null || true
        cp -r linux-complete/flatpak release-files/app-store-packages/ 2>/dev/null || true
        cp -r ios-complete/ios-store release-files/app-store-packages/ 2>/dev/null || true
        
        echo "Release files organized"        
    
    - name: Create Comprehensive Release
      uses: softprops/action-gh-release@v1
      with:
        name: AccessMate v${{ env.APP_VERSION }} - Complete Edition (Manual Hard Installs + App Store Packages)
        body: |
          AccessMate v${{ env.APP_VERSION }} - COMPLETE DUAL DISTRIBUTION RELEASE
          
          TWO DISTRIBUTION METHODS AVAILABLE:
          MANUAL HARD INSTALLS (Full System Integration)
          APP STORE PACKAGES (Store Submission Ready)
          
          MOBILE APPS:
          Android:
          - APK Hard Install: AccessMate-release.apk (system-level permissions, device admin)
          - AAB Store Package: AccessMate.aab (Google Play Store ready)
          
          iOS:
          - IPA Hard Install: AccessMate-HardInstall.ipa (system integration, jailbreak/sideload)
          - App Store Package: ios-store/ folder (Xcode project for App Store submission)
          
          DESKTOP APPS:
          Windows:
          - Hard Install Executable: AccessMate-HardInstall-v${{ env.APP_VERSION }}.exe (registry + services + startup)
          - MSI Package: AccessMate.msi (enterprise deployment)
          - MSIX Store Package: AccessMate-Store.msix (Microsoft Store ready)
          
          macOS:
          - DMG Hard Installer: AccessMate-HardInstall-v${{ env.APP_VERSION }}.dmg (admin privileges required)
          - PKG Store Package: AccessMate-AppStore.pkg (Mac App Store ready)
          
          Linux:
          - AppImage Hard Install: AccessMate-HardInstall-x86_64.AppImage --hardinstall (systemd integration)
          - DEB Package: accessmate_${{ env.APP_VERSION }}_amd64.deb (Ubuntu/Debian)
          - RPM Package: accessmate-${{ env.APP_VERSION }}.rpm (Red Hat/SUSE)
          - Flatpak Manifest: flatpak/ folder (Flathub submission ready)
          
          FEATURES:
          - Voice commands and speech synthesis
          - Screen reader with external screen reader support
          - Object recognition and OCR
          - Emergency features and accessibility tools
          - Multi-language support
          - 20 full version license keys included
        files: |
          release-files/manual-hard-installs/*
          release-files/app-store-packages/*
          windows-complete/*
          android-complete/*
          ios-complete/*
          macos-complete/*
          linux-complete/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    needs: [build-windows-complete, build-android-complete, build-ios-complete, build-macos-complete, build-linux-complete]
    runs-on: ubuntu-latest
    steps:
    - name: Create Build Summary
      run: |
        echo "AccessMate Complete Dual Distribution Build Finished!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "MANUAL HARD INSTALL PACKAGES:" >> $GITHUB_STEP_SUMMARY
        echo "- Windows: Hard Install EXE + Registry Integration + System Services + MSI" >> $GITHUB_STEP_SUMMARY
        echo "- macOS: Hard Install DMG + Admin Privileges + System Integration" >> $GITHUB_STEP_SUMMARY
        echo "- Android: APK with System-Level Permissions + Device Admin" >> $GITHUB_STEP_SUMMARY
        echo "- Linux: AppImage with Systemd Services + DEB + RPM" >> $GITHUB_STEP_SUMMARY
        echo "- iOS: Hard Install IPA with System Integration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "APP STORE PACKAGES:" >> $GITHUB_STEP_SUMMARY
        echo "- Google Play Store: AAB bundle (store-compliant permissions)" >> $GITHUB_STEP_SUMMARY
        echo "- Apple App Store: iOS project folder (Xcode submission ready)" >> $GITHUB_STEP_SUMMARY
        echo "- Microsoft Store: MSIX package (store submission ready)" >> $GITHUB_STEP_SUMMARY
        echo "- Mac App Store: PKG package (store submission ready)" >> $GITHUB_STEP_SUMMARY
        echo "- Flathub: Flatpak manifest (store submission ready)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All platforms ready for DUAL distribution (Manual + Store)!" >> $GITHUB_STEP_SUMMARY
        echo "GitHub Releases contain both Manual Hard Installs AND App Store Packages!" >> $GITHUB_STEP_SUMMARY