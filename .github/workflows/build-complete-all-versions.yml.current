name: Build ALL Versions - Manual Hard Installs + App Store Packages + GitHub Releases

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

env:
  APP_NAME: AccessMate
  APP_VERSION: 1.0.0
  PYTHON_VERSION: 3.11

jobs:
  build-windows-complete:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Windows dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller cx_Freeze auto-py-to-exe
        Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "InnoSetup.exe"
        Start-Process -FilePath "InnoSetup.exe" -ArgumentList "/VERYSILENT", "/NORESTART" -Wait
    
    - name: Build Windows EXE
      run: |
        Copy-Item "src\main_desktop.py" "src\main.py" -Force -ErrorAction SilentlyContinue
        python build_windows.py
        echo "Hard System Install EXE created"
    
    - name: Create Inno Setup Installer
      run: |
        $innoScript = @"
        [Setup]
        AppName=${{ env.APP_NAME }}
        AppVersion=${{ env.APP_VERSION }}
        AppPublisher=AccessMate Team
        DefaultDirName={autopf}\${{ env.APP_NAME }}
        OutputDir=dist\installers
        OutputBaseFilename=${{ env.APP_NAME }}-HardInstall-v${{ env.APP_VERSION }}
        PrivilegesRequired=admin
        
        [Files]
        Source: "dist\${{ env.APP_NAME }}.exe"; DestDir: "{app}"; Flags: ignoreversion
        
        [Icons]
        Name: "{group}\${{ env.APP_NAME }}"; Filename: "{app}\${{ env.APP_NAME }}.exe"
        Name: "{autodesktop}\${{ env.APP_NAME }}"; Filename: "{app}\${{ env.APP_NAME }}.exe"
        "@
        
        New-Item -ItemType Directory -Force -Path "dist\installers"
        $innoScript | Out-File -FilePath "setup.iss" -Encoding UTF8
        & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "setup.iss"
        echo "Inno Setup installer created"
    
    - name: Create MSI Package
      run: |
        python -c "
        from cx_Freeze import setup, Executable
        setup(
            name='${{ env.APP_NAME }}',
            version='${{ env.APP_VERSION }}',
            description='Comprehensive Accessibility Assistant',
            executables=[Executable('src/main_desktop.py', target_name='${{ env.APP_NAME }}.exe')],
            options={'bdist_msi': {'upgrade_code': '{12345678-1234-1234-1234-123456789012}'}}
        )"
        python setup.py bdist_msi
        echo "MSI package created"
    
    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-complete
        path: |
          dist/*.exe
          dist/installers/*.exe
          dist/*.msi

  build-android-complete:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
        pip install buildozer cython
        pip install -r requirements.txt
    
    - name: Build APK
      run: |
        echo "android.permissions = WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,RECORD_AUDIO" >> buildozer.spec
        buildozer android debug
        buildozer android release
        echo "APK created successfully"
    
    - name: Upload Android Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-complete
        path: |
          bin/*.apk

  create-github-release:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    needs: [build-windows-complete, build-android-complete]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: AccessMate v${{ env.APP_VERSION }} - Complete Edition
        body: |
          AccessMate Complete Release
          
          MOBILE APPS:
          - Android APK (manual install)
          
          DESKTOP APPS:
          - Windows EXE (hard install with registry integration)
          - Windows MSI (enterprise deployment)
          
          FEATURES:
          - Voice commands and speech synthesis
          - Screen reader support
          - Object recognition and OCR
          - Emergency accessibility tools
          - Multi-language support
        files: |
          windows-complete/*
          android-complete/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    needs: [build-windows-complete, build-android-complete]
    runs-on: ubuntu-latest
    steps:
    - name: Create Build Summary
      run: |
        echo "AccessMate Complete Build Finished!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "PACKAGES CREATED:" >> $GITHUB_STEP_SUMMARY
        echo "- Windows: Hard Install EXE + MSI Package" >> $GITHUB_STEP_SUMMARY
        echo "- Android: APK Package" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All platforms ready for distribution!" >> $GITHUB_STEP_SUMMARY