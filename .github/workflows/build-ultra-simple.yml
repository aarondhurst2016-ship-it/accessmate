name: Simple Multi-Platform Build (DISABLED)

on:
  # Disabled - using build-all-platforms-fixed.yml instead
  # push:
  #   branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Windows Build - Simplest possible
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        
    - name: Create test script
      run: |
        echo 'print("AccessMate - AI Accessibility Assistant")
        print("Platform: Windows")  
        print("Status: Working!")
        input("Press Enter to exit...")' > test_app.py
        
    - name: Build Windows exe
      run: |
        pyinstaller --onefile --name=AccessMate test_app.py
        
    - name: Verify build
      run: |
        if (Test-Path "dist/AccessMate.exe") {
          Write-Host "✅ Windows build SUCCESS"
          $size = (Get-Item "dist/AccessMate.exe").Length
          Write-Host "📦 Size: $($size / 1024) KB"
        } else {
          Write-Host "❌ Build FAILED"
          exit 1
        }
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: AccessMate-Windows-Simple
        path: dist/AccessMate.exe
        retention-days: 7

  # Linux Build - Simplest possible  
  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python  
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        
    - name: Create test script
      run: |
        cat > test_app.py << 'EOF'
        print("AccessMate - AI Accessibility Assistant")
        print("Platform: Linux")
        print("Status: Working!")
        input("Press Enter to exit...")
        EOF
        
    - name: Build Linux executable
      run: |
        pyinstaller --onefile --name=accessmate test_app.py
        
    - name: Verify build  
      run: |
        if [ -f "dist/accessmate" ]; then
          echo "✅ Linux build SUCCESS"
          ls -lh dist/accessmate
          chmod +x dist/accessmate
        else
          echo "❌ Build FAILED"
          exit 1
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: AccessMate-Linux-Simple
        path: dist/accessmate
        retention-days: 7

  # macOS Build - Simplest possible
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 20
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        
    - name: Create test script
      run: |
        cat > test_app.py << 'EOF'
        print("AccessMate - AI Accessibility Assistant")
        print("Platform: macOS")
        print("Status: Working!")
        input("Press Enter to exit...")
        EOF
        
    - name: Build macOS executable
      run: |
        pyinstaller --onefile --name=AccessMate test_app.py
        
    - name: Verify build
      run: |
        if [ -f "dist/AccessMate" ]; then
          echo "✅ macOS build SUCCESS"
          ls -lh dist/AccessMate
          chmod +x dist/AccessMate
        else
          echo "❌ Build FAILED"
          exit 1
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: AccessMate-macOS-Simple
        path: dist/AccessMate
        retention-days: 7

  # Build Summary
  build-summary:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Show Results
      run: |
        echo "🎯 BUILD SUMMARY:"
        echo "=================="
        echo "Windows: ${{ needs.build-windows.result }}"
        echo "Linux:   ${{ needs.build-linux.result }}" 
        echo "macOS:   ${{ needs.build-macos.result }}"
        echo ""
        
        success_count=0
        if [ "${{ needs.build-windows.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        if [ "${{ needs.build-linux.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        if [ "${{ needs.build-macos.result }}" = "success" ]; then
          success_count=$((success_count + 1))
        fi
        
        echo "✅ Successful builds: $success_count/3"
        
        if [ $success_count -eq 3 ]; then
          echo "🎉 ALL BUILDS SUCCESSFUL!"
          echo "📦 Download artifacts from GitHub Actions"
          echo "🏪 Ready for basic app store submission"
        elif [ $success_count -gt 0 ]; then
          echo "⚠️  Partial success - some builds worked"
          echo "🔧 Check failed jobs for specific errors"
        else
          echo "❌ All builds failed - need debugging"
        fi